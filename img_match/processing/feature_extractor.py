import os

from PIL.Image import Image
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.densenet import DenseNet121, preprocess_input
from tensorflow.keras.models import Model
import numpy as np
import tensorflow as tf

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"  # see issue #152
os.environ["CUDA_VISIBLE_DEVICES"] = "0"
# os.environ["CUDA_VISIBLE_DEVICES"] = ""

gpu_devices = tf.config.experimental.list_physical_devices('GPU')
if gpu_devices:
    tf.config.experimental.set_memory_growth(gpu_devices[0], True)  # Limit the GPU memory usage


class FeatureExtractor:
    """
    Extracts image features using a CNN
    """

    IMG_WIDTH = None
    IMG_HEIGHT = None

    def __init__(self):
        base_model = DenseNet121(weights='imagenet')
        self.IMG_WIDTH = base_model.input_shape[1]
        self.IMG_HEIGHT = base_model.input_shape[2]
        self.model = Model(
            inputs=base_model.input,
            outputs=[base_model.get_layer('avg_pool').output]
        )

    def get_features(self, img: Image) -> np.ndarray:
        """
        Returns a numpy array of normalized image features generated by the avg_pool layer of
        the CNN
        :param img: Pillow Image
        :return: (1, 1024) numpy array
        """
        predictions = self._extract_predictions(img)
        normalized_features = predictions / np.linalg.norm(predictions)
        return normalized_features

    def _extract_predictions(self, img: Image) -> np.ndarray:
        img = img.resize((self.IMG_HEIGHT, self.IMG_HEIGHT))
        img = img.convert('RGB')
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)
        return self.model.predict(x)
