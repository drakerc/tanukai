import os
import time

import requests
from PIL.Image import Image
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.efficientnet_v2 import preprocess_input
from tensorflow.keras.applications.efficientnet_v2 import EfficientNetV2B1 as BaseModel
from tensorflow.keras.models import Model
import numpy as np
import tensorflow as tf
import config

# print("Start")
# import tempfile
# base_model = BaseModel(weights='imagenet')
# model = Model(
#     inputs=base_model.input,
#     outputs=[base_model.get_layer('avg_pool').output]
#
# )
# xx = base_model.input_shape
# print(f"Input shape: {xx}")
# xx = base_model.get_layer('avg_pool').output_shape
# print(f"Output shape: {xx}")
# MODEL_DIR = tempfile.gettempdir()
# version = 1
# export_path = os.path.join("model", str(version))
# model.save(export_path, overwrite=True)
# exit()

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"  # see issue #152
os.environ["CUDA_VISIBLE_DEVICES"] = "0"
# os.environ["CUDA_VISIBLE_DEVICES"] = ""

gpu_devices = tf.config.experimental.list_physical_devices("GPU")
if gpu_devices:
    tf.config.experimental.set_memory_growth(
        gpu_devices[0], True
    )  # Limit the GPU memory usage


class FeatureExtractor:
    """
    Extracts image features using a CNN
    """

    IMG_WIDTH = 240
    IMG_HEIGHT = 240

    def get_features(self, img: Image) -> np.ndarray:
        """
        Returns a numpy array of normalized image features generated by the avg_pool layer of
        the CNN
        :param img: Pillow Image
        :return: (1, 1280) numpy array
        """
        predictions = self._extract_predictions(img)
        normalized_features = predictions / np.linalg.norm(predictions)
        return normalized_features

    def _extract_predictions(self, img: Image) -> list:
        img = img.resize((self.IMG_HEIGHT, self.IMG_HEIGHT))
        img = img.convert("RGB")
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x).tolist()
        start = time.time()
        response = requests.post(
            f"{config.TENSORFLOW_SERVING_MODEL_ADDRESS}:predict", json={"instances": x}
        )
        json_response = response.json()
        end = time.time()
        print(end - start)
        return json_response.get("predictions")
